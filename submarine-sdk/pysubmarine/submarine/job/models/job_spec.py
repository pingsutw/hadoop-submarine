# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements. See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# coding: utf-8

"""
    Submarine Experiment API

    The Submarine REST API allows you to create, list, and get experiments. TheAPI is hosted under the /v1/jobs route on the Submarine server. For example,to list experiments on a server hosted at http://localhost:8080, accesshttp://localhost:8080/api/v1/jobs/  # noqa: E501

    The version of the OpenAPI document: 0.4.0-SNAPSHOT
    Contact: submarine-dev@submarine.apache.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from submarine.job.configuration import Configuration


class JobSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'namespace': 'str',
        'library_spec': 'JobLibrarySpec',
        'task_specs': 'dict(str, JobTaskSpec)',
        'projects': 'str'
    }

    attribute_map = {
        'name': 'name',
        'namespace': 'namespace',
        'library_spec': 'librarySpec',
        'task_specs': 'taskSpecs',
        'projects': 'projects'
    }

    def __init__(self, name=None, namespace=None, library_spec=None, task_specs=None, projects=None, local_vars_configuration=None):  # noqa: E501
        """JobSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._namespace = None
        self._library_spec = None
        self._task_specs = None
        self._projects = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if namespace is not None:
            self.namespace = namespace
        if library_spec is not None:
            self.library_spec = library_spec
        if task_specs is not None:
            self.task_specs = task_specs
        if projects is not None:
            self.projects = projects

    @property
    def name(self):
        """Gets the name of this JobSpec.  # noqa: E501


        :return: The name of this JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this JobSpec.


        :param name: The name of this JobSpec.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def namespace(self):
        """Gets the namespace of this JobSpec.  # noqa: E501


        :return: The namespace of this JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this JobSpec.


        :param namespace: The namespace of this JobSpec.  # noqa: E501
        :type: str
        """

        self._namespace = namespace

    @property
    def library_spec(self):
        """Gets the library_spec of this JobSpec.  # noqa: E501


        :return: The library_spec of this JobSpec.  # noqa: E501
        :rtype: JobLibrarySpec
        """
        return self._library_spec

    @library_spec.setter
    def library_spec(self, library_spec):
        """Sets the library_spec of this JobSpec.


        :param library_spec: The library_spec of this JobSpec.  # noqa: E501
        :type: JobLibrarySpec
        """

        self._library_spec = library_spec

    @property
    def task_specs(self):
        """Gets the task_specs of this JobSpec.  # noqa: E501


        :return: The task_specs of this JobSpec.  # noqa: E501
        :rtype: dict(str, JobTaskSpec)
        """
        return self._task_specs

    @task_specs.setter
    def task_specs(self, task_specs):
        """Sets the task_specs of this JobSpec.


        :param task_specs: The task_specs of this JobSpec.  # noqa: E501
        :type: dict(str, JobTaskSpec)
        """

        self._task_specs = task_specs

    @property
    def projects(self):
        """Gets the projects of this JobSpec.  # noqa: E501


        :return: The projects of this JobSpec.  # noqa: E501
        :rtype: str
        """
        return self._projects

    @projects.setter
    def projects(self, projects):
        """Sets the projects of this JobSpec.


        :param projects: The projects of this JobSpec.  # noqa: E501
        :type: str
        """

        self._projects = projects

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, JobSpec):
            return True

        return self.to_dict() != other.to_dict()
