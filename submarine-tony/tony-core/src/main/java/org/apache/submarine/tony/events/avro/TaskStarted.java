/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.apache.submarine.tony.events.avro;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class TaskStarted extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 3618835329986439076L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TaskStarted\",\"namespace\":\"org.apache.submarine.tony.events.avro\",\"fields\":[{\"name\":\"taskType\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"taskIndex\",\"type\":\"int\"},{\"name\":\"host\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public String taskType;
  @Deprecated public int taskIndex;
  @Deprecated public String host;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TaskStarted() {}

  /**
   * All-args constructor.
   * @param taskType The new value for taskType
   * @param taskIndex The new value for taskIndex
   * @param host The new value for host
   */
  public TaskStarted(String taskType, Integer taskIndex, String host) {
    this.taskType = taskType;
    this.taskIndex = taskIndex;
    this.host = host;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return taskType;
    case 1: return taskIndex;
    case 2: return host;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: taskType = (String)value$; break;
    case 1: taskIndex = (Integer)value$; break;
    case 2: host = (String)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'taskType' field.
   * @return The value of the 'taskType' field.
   */
  public String getTaskType() {
    return taskType;
  }

  /**
   * Sets the value of the 'taskType' field.
   * @param value the value to set.
   */
  public void setTaskType(String value) {
    this.taskType = value;
  }

  /**
   * Gets the value of the 'taskIndex' field.
   * @return The value of the 'taskIndex' field.
   */
  public Integer getTaskIndex() {
    return taskIndex;
  }

  /**
   * Sets the value of the 'taskIndex' field.
   * @param value the value to set.
   */
  public void setTaskIndex(Integer value) {
    this.taskIndex = value;
  }

  /**
   * Gets the value of the 'host' field.
   * @return The value of the 'host' field.
   */
  public String getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(String value) {
    this.host = value;
  }

  /**
   * Creates a new TaskStarted RecordBuilder.
   * @return A new TaskStarted RecordBuilder
   */
  public static org.apache.submarine.tony.events.avro.TaskStarted.Builder newBuilder() {
    return new org.apache.submarine.tony.events.avro.TaskStarted.Builder();
  }

  /**
   * Creates a new TaskStarted RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TaskStarted RecordBuilder
   */
  public static org.apache.submarine.tony.events.avro.TaskStarted.Builder newBuilder(org.apache.submarine.tony.events.avro.TaskStarted.Builder other) {
    return new org.apache.submarine.tony.events.avro.TaskStarted.Builder(other);
  }

  /**
   * Creates a new TaskStarted RecordBuilder by copying an existing TaskStarted instance.
   * @param other The existing instance to copy.
   * @return A new TaskStarted RecordBuilder
   */
  public static org.apache.submarine.tony.events.avro.TaskStarted.Builder newBuilder(org.apache.submarine.tony.events.avro.TaskStarted other) {
    return new org.apache.submarine.tony.events.avro.TaskStarted.Builder(other);
  }

  /**
   * RecordBuilder for TaskStarted instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TaskStarted>
    implements org.apache.avro.data.RecordBuilder<TaskStarted> {

    private String taskType;
    private int taskIndex;
    private String host;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.apache.submarine.tony.events.avro.TaskStarted.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taskType)) {
        this.taskType = data().deepCopy(fields()[0].schema(), other.taskType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taskIndex)) {
        this.taskIndex = data().deepCopy(fields()[1].schema(), other.taskIndex);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.host)) {
        this.host = data().deepCopy(fields()[2].schema(), other.host);
        fieldSetFlags()[2] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing TaskStarted instance
     * @param other The existing instance to copy.
     */
    private Builder(org.apache.submarine.tony.events.avro.TaskStarted other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.taskType)) {
        this.taskType = data().deepCopy(fields()[0].schema(), other.taskType);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taskIndex)) {
        this.taskIndex = data().deepCopy(fields()[1].schema(), other.taskIndex);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.host)) {
        this.host = data().deepCopy(fields()[2].schema(), other.host);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'taskType' field.
      * @return The value.
      */
    public String getTaskType() {
      return taskType;
    }

    /**
      * Sets the value of the 'taskType' field.
      * @param value The value of 'taskType'.
      * @return This builder.
      */
    public org.apache.submarine.tony.events.avro.TaskStarted.Builder setTaskType(String value) {
      validate(fields()[0], value);
      this.taskType = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taskType' field has been set.
      * @return True if the 'taskType' field has been set, false otherwise.
      */
    public boolean hasTaskType() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taskType' field.
      * @return This builder.
      */
    public org.apache.submarine.tony.events.avro.TaskStarted.Builder clearTaskType() {
      taskType = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'taskIndex' field.
      * @return The value.
      */
    public Integer getTaskIndex() {
      return taskIndex;
    }

    /**
      * Sets the value of the 'taskIndex' field.
      * @param value The value of 'taskIndex'.
      * @return This builder.
      */
    public org.apache.submarine.tony.events.avro.TaskStarted.Builder setTaskIndex(int value) {
      validate(fields()[1], value);
      this.taskIndex = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'taskIndex' field has been set.
      * @return True if the 'taskIndex' field has been set, false otherwise.
      */
    public boolean hasTaskIndex() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'taskIndex' field.
      * @return This builder.
      */
    public org.apache.submarine.tony.events.avro.TaskStarted.Builder clearTaskIndex() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'host' field.
      * @return The value.
      */
    public String getHost() {
      return host;
    }

    /**
      * Sets the value of the 'host' field.
      * @param value The value of 'host'.
      * @return This builder.
      */
    public org.apache.submarine.tony.events.avro.TaskStarted.Builder setHost(String value) {
      validate(fields()[2], value);
      this.host = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'host' field has been set.
      * @return True if the 'host' field has been set, false otherwise.
      */
    public boolean hasHost() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'host' field.
      * @return This builder.
      */
    public org.apache.submarine.tony.events.avro.TaskStarted.Builder clearHost() {
      host = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public TaskStarted build() {
      try {
        TaskStarted record = new TaskStarted();
        record.taskType = fieldSetFlags()[0] ? this.taskType : (String) defaultValue(fields()[0]);
        record.taskIndex = fieldSetFlags()[1] ? this.taskIndex : (Integer) defaultValue(fields()[1]);
        record.host = fieldSetFlags()[2] ? this.host : (String) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
